#!/bin/bash

# üßπ Margo Agent - Complete Cleanup Script
# This script can clean up archived files after consolidation verification

echo "üßπ Margo Agent - Complete Cleanup"
echo "================================="
echo ""
echo "This script will help you clean up archived files after consolidation."
echo "‚ö†Ô∏è  WARNING: This will permanently delete archived files!"
echo ""

# Show what would be deleted
echo "üìÅ Files that would be deleted:"
echo ""
echo "üìÑ Archived Documentation (archive_old_docs/):"
if [ -d "archive_old_docs" ]; then
    ls -la archive_old_docs/ | grep -v "^total" | grep -v "^d" | awk '{print "  ‚Ä¢ " $9}'
    DOC_COUNT=$(ls -1 archive_old_docs/ | wc -l)
    echo "  Total: $DOC_COUNT files"
else
    echo "  ‚Ä¢ No archived docs found"
    DOC_COUNT=0
fi

echo ""
echo "üîß Archived Scripts (archive_old_scripts/):"
if [ -d "archive_old_scripts" ]; then
    ls -la archive_old_scripts/ | grep -v "^total" | grep -v "^d" | awk '{print "  ‚Ä¢ " $9}'
    SCRIPT_COUNT=$(ls -1 archive_old_scripts/ | wc -l)
    echo "  Total: $SCRIPT_COUNT files"
else
    echo "  ‚Ä¢ No archived scripts found"
    SCRIPT_COUNT=0
fi

TOTAL_COUNT=$((DOC_COUNT + SCRIPT_COUNT))

echo ""
echo "üìä Summary:"
echo "  ‚Ä¢ Documentation files: $DOC_COUNT"
echo "  ‚Ä¢ Shell scripts: $SCRIPT_COUNT"
echo "  ‚Ä¢ Total files: $TOTAL_COUNT"

if [ $TOTAL_COUNT -eq 0 ]; then
    echo "‚úÖ No archived files found. Nothing to clean up!"
    exit 0
fi

echo ""
echo "üîç Before deletion, let's verify the new structure works:"
echo ""

# Test new documentation structure
echo "üìö Testing new documentation structure..."
if [ -d "docs" ]; then
    echo "‚úÖ docs/ directory exists"
    NEW_DOC_COUNT=$(find docs/ -name "*.md" | wc -l)
    echo "‚úÖ $NEW_DOC_COUNT documentation files in docs/"
    
    if [ -f "docs/README.md" ]; then
        echo "‚úÖ docs/README.md (navigation) exists"
    else
        echo "‚ùå docs/README.md missing!"
    fi
    
    if [ -f "docs/QUICK_START.md" ]; then
        echo "‚úÖ docs/QUICK_START.md exists"
    else
        echo "‚ùå docs/QUICK_START.md missing!"
    fi
    
    if [ -f "docs/DEPLOYMENT_GUIDE.md" ]; then
        echo "‚úÖ docs/DEPLOYMENT_GUIDE.md exists"
    else
        echo "‚ùå docs/DEPLOYMENT_GUIDE.md missing!"
    fi
else
    echo "‚ùå docs/ directory not found!"
    echo "   Please run the documentation consolidation first."
    exit 1
fi

echo ""

# Test new scripts structure
echo "üîß Testing new scripts structure..."
if [ -d "scripts" ]; then
    echo "‚úÖ scripts/ directory exists"
    NEW_SCRIPT_COUNT=$(find scripts/ -name "*.sh" | wc -l)
    echo "‚úÖ $NEW_SCRIPT_COUNT script files in scripts/"
    
    if [ -f "scripts/setup.sh" ]; then
        echo "‚úÖ scripts/setup.sh (master setup) exists"
    else
        echo "‚ùå scripts/setup.sh missing!"
    fi
    
    if [ -f "scripts/setup_local.sh" ]; then
        echo "‚úÖ scripts/setup_local.sh exists"
    else
        echo "‚ùå scripts/setup_local.sh missing!"
    fi
    
    # Test if scripts are executable
    if [ -x "scripts/setup.sh" ]; then
        echo "‚úÖ Scripts are executable"
    else
        echo "‚ö†Ô∏è  Making scripts executable..."
        chmod +x scripts/*.sh
    fi
else
    echo "‚ùå scripts/ directory not found!"
    echo "   Please run the script consolidation first."
    exit 1
fi

echo ""
echo "‚úÖ Consolidation verification complete!"
echo ""

# Ask for confirmation
echo "‚ùì What would you like to do?"
echo ""
echo "1. üóëÔ∏è  Delete all archived files (PERMANENT)"
echo "2. üì¶ Keep archives as backup"
echo "3. üîç Show detailed file comparison"
echo "4. ‚ùå Cancel"
echo ""

read -p "Enter your choice (1-4): " choice

case $choice in
    1)
        echo ""
        echo "‚ö†Ô∏è  FINAL WARNING: This will permanently delete $TOTAL_COUNT archived files!"
        read -p "Type 'DELETE' to confirm: " confirm
        
        if [ "$confirm" = "DELETE" ]; then
            echo ""
            echo "üóëÔ∏è  Deleting archived files..."
            
            if [ -d "archive_old_docs" ]; then
                rm -rf archive_old_docs/
                echo "‚úÖ Deleted archive_old_docs/ ($DOC_COUNT files)"
            fi
            
            if [ -d "archive_old_scripts" ]; then
                rm -rf archive_old_scripts/
                echo "‚úÖ Deleted archive_old_scripts/ ($SCRIPT_COUNT files)"
            fi
            
            # Also clean up the consolidation scripts
            if [ -f "consolidate_docs.sh" ]; then
                rm consolidate_docs.sh
                echo "‚úÖ Removed consolidate_docs.sh (moved to scripts/)"
            fi
            
            if [ -f "consolidate_scripts.sh" ]; then
                rm consolidate_scripts.sh
                echo "‚úÖ Removed consolidate_scripts.sh (completed)"
            fi
            
            echo ""
            echo "üéâ Cleanup complete!"
            echo ""
            echo "üìä Final structure:"
            echo "  ‚Ä¢ docs/: $NEW_DOC_COUNT documentation files"
            echo "  ‚Ä¢ scripts/: $NEW_SCRIPT_COUNT shell scripts"
            echo "  ‚Ä¢ Root: Clean and organized"
            echo ""
            echo "üöÄ Your project is now fully consolidated and optimized!"
        else
            echo "‚ùå Deletion cancelled."
        fi
        ;;
    2)
        echo ""
        echo "üì¶ Keeping archives as backup."
        echo "‚úÖ Your archives are preserved in:"
        echo "  ‚Ä¢ archive_old_docs/"
        echo "  ‚Ä¢ archive_old_scripts/"
        echo ""
        echo "üí° You can delete them later when you're confident the new structure works."
        ;;
    3)
        echo ""
        echo "üîç Detailed comparison:"
        echo ""
        echo "üìÑ Documentation Migration:"
        echo "Before: 60+ scattered .md files"
        echo "After: $NEW_DOC_COUNT organized files in docs/"
        echo ""
        
        if [ -d "archive_old_docs" ]; then
            echo "üóÇÔ∏è  Archived documentation files:"
            for file in archive_old_docs/*.md; do
                if [ -f "$file" ]; then
                    basename_file=$(basename "$file")
                    echo "  üìÑ $basename_file"
                    
                    # Check if content is preserved
                    if grep -q "deployment\|setup\|install" "$file" 2>/dev/null; then
                        echo "    ‚Üí Content preserved in docs/DEPLOYMENT_GUIDE.md"
                    elif grep -q "architecture\|agent\|system" "$file" 2>/dev/null; then
                        echo "    ‚Üí Content preserved in docs/AGENT_ARCHITECTURE.md"
                    elif grep -q "quick\|start\|getting" "$file" 2>/dev/null; then
                        echo "    ‚Üí Content preserved in docs/QUICK_START.md"
                    else
                        echo "    ‚Üí Content preserved in appropriate docs/ file"
                    fi
                fi
            done
        fi
        
        echo ""
        echo "üîß Script Migration:"
        echo "Before: 9 scattered .sh files"
        echo "After: $NEW_SCRIPT_COUNT organized files in scripts/"
        echo ""
        
        if [ -d "archive_old_scripts" ]; then
            echo "üóÇÔ∏è  Archived script files:"
            for file in archive_old_scripts/*.sh; do
                if [ -f "$file" ]; then
                    basename_file=$(basename "$file")
                    echo "  üîß $basename_file"
                    
                    # Show where functionality moved
                    case $basename_file in
                        *setup_simple*|*setup_advanced*)
                            echo "    ‚Üí Functionality in scripts/setup_local.sh"
                            ;;
                        *deploy*|*build*)
                            echo "    ‚Üí Functionality in scripts/deploy_*.sh"
                            ;;
                        *)
                            echo "    ‚Üí Functionality preserved in scripts/"
                            ;;
                    esac
                fi
            done
        fi
        ;;
    4)
        echo "‚ùå Cancelled."
        ;;
    *)
        echo "‚ùå Invalid choice."
        ;;
esac

echo ""
echo "üìö Remember: Your new structure is:"
echo "  ‚Ä¢ docs/ - All documentation"
echo "  ‚Ä¢ scripts/ - All shell scripts"
echo "  ‚Ä¢ Root README.md - Points to docs/"
echo ""
echo "üéØ Quick commands:"
echo "  ‚Ä¢ Setup: ./scripts/setup.sh"
echo "  ‚Ä¢ Docs: open docs/README.md"
echo "  ‚Ä¢ Deploy: ./scripts/deploy_cloudflare.sh"
